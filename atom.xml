<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-27T12:26:08.298Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hooks工作原理</title>
    <link href="http://example.com/2020/12/27/Hooks%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2020/12/27/Hooks%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2020-12-27T12:25:10.000Z</published>
    <updated>2020-12-27T12:26:08.298Z</updated>
    
    <content type="html"><![CDATA[<p>我们大部分 React 类组件可以保存状态，而函数组件不能？ 并且类组件具有生命周期，而函数组件却不能？</p><blockquote><p>React 早期版本，类组件可以通过继承PureComponent来优化一些不必要的渲染，相对于函数组件，React 官网没有提供对应的方法来缓存函数组件以减少一些不必要的渲染，直接 16.6 出来的 React.memo函数。<br>React 16.8 新出来的Hook可以让React 函数组件具有状态，并提供类似 <strong>componentDidMount</strong>和<strong>componentDidUpdate</strong>等生命周期方法。<br><strong>Hooks不会替换类，它们只是一个你可以使用的新工具。</strong></p></blockquote><h2 id="Hooks的例子"><a href="#Hooks的例子" class="headerlink" title="Hooks的例子:"></a>Hooks的例子:</h2><p>OneTimeButton 是函数组件，所做的事情就是当我们点击的时候调用 sayHi 方法函数组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OneTimeButton</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;props.onClick&#125;&gt;</span><br><span class="line">        点我</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;yo&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;OneTimeButton onClick=&#123;sayHi&#125;/&gt;,</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>让这个组件做的是，跟踪它是否被点击，如果被点击了，禁用按钮，就像一次性开关一样。</p><p>但它需要一个state，因为是一个函数，它不可能有状态(React 16.8之前)，所以需要重构成类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneTimeButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    clicked: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.props.onClick();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ok, no more clicking.</span></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123; <span class="attr">clicked</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;<span class="built_in">this</span>.handleClick&#125;</span><br><span class="line">        disabled=&#123;<span class="built_in">this</span>.state.clicked&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        You Can Only Click Me Once</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Hook-添加-State"><a href="#使用-Hook-添加-State" class="headerlink" title="使用 Hook 添加 State"></a>使用 Hook 添加 State</h2><p>用新的　useState　hook向普通函数组件添加状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OneTimeButton</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [clicked, setClicked] = useState(<span class="literal">false</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    props.onClick();</span><br><span class="line">    setClicked(<span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button</span><br><span class="line">      onClick=&#123;clicked ? <span class="literal">undefined</span> : doClick&#125;</span><br><span class="line">      disabled=&#123;clicked&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      点我</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>useState是一个hook。 它的名字以“use”开头（这是Hooks的规则之一 - 它们的<strong>名字必须以“use”开头</strong>）。</p><p>useState hook 的参数是 <strong>state 的初始值</strong>，<strong>返回一个包含两个元素的数组</strong>:当前state和一个用于更改state 的函数。</p><p>类组件有一个大的state对象，一个函数this.setState一次改变整个state对象。</p><p><strong>函数组件根本没有状态</strong>，但useState hook允许我们在需要时添加很小的<strong>状态块</strong>。 因此，如果只需要一个布尔值，我们就可以创建一些状态来保存它。</p><p>由于Hook以某种特殊方式创建这些状态，并且在函数组件内也没有像setState函数来更改状态，因此 Hook 需要一个函数来更新每个状态。 所以 useState 返回是一对对应关系：一个值，一个更新该值函数。 当然，值可以是任何东西 - 任何JS类型 - 数字，布尔值，对象，数组等。</p><h2 id="Hooks-的特点"><a href="#Hooks-的特点" class="headerlink" title="Hooks 的特点"></a>Hooks 的特点</h2><p><strong>调用顺序规则 (它们每次必须以相同的顺序调用)；</strong></p><p>假设有以下这个组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AudioPlayer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [volume, setVolume] = useState(<span class="number">80</span>);</span><br><span class="line">  <span class="keyword">const</span> [position, setPosition] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [isPlaying, setPlaying] = useState(<span class="literal">false</span>);</span><br><span class="line">  .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它调用useState 3次，React 会在第一次渲染时将这三个 hook 放入 Hooks 数组中。</p><p>下次渲染时，同样的3个hooks以相同的顺序被调用，所以React可以查看它的数组，并发现已经在位置0有一个useState hook ，所以React不会创建一个新状态，而是返回现有状态。</p><p>这就是React能够在多个函数调用中创建和维护状态的方式，即使变量本身每次都超出作用域。</p><h2 id="Hooks-的规则"><a href="#Hooks-的规则" class="headerlink" title="Hooks 的规则"></a>Hooks 的规则</h2><p>自定义 hooks 函数只需要遵守规则 3 ：它们的名称必须以“<strong>use</strong>”为前缀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AudioPlayer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Extract these 3 pieces of state:</span></span><br><span class="line">  <span class="keyword">const</span> [volume, setVolume] = useState(<span class="number">80</span>);</span><br><span class="line">  <span class="keyword">const</span> [position, setPosition] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [isPlaying, setPlaying] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &lt; beautiful audio player goes here &gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个专门处理这些状态的新函数，并使用一些额外的方法返回一个对象，以便更容易启动和停止播放，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usePlayerState</span>(<span class="params">lengthOfClip</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [volume, setVolume] = useState(<span class="number">80</span>);</span><br><span class="line">  <span class="keyword">const</span> [position, setPosition] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [isPlaying, setPlaying] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setPlaying(<span class="literal">false</span>);</span><br><span class="line">    setPosition(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> start = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setPlaying(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    volume,</span><br><span class="line">    position,</span><br><span class="line">    isPlaying,</span><br><span class="line">    setVolume,</span><br><span class="line">    setPosition,</span><br><span class="line">    start,</span><br><span class="line">    stop</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样提取状态的一个好处是可以将<strong>相关的逻辑和行为组合在一起</strong>。可以提取一组状态和相关事件处理程序以及其他更新逻辑，这不仅可以<strong>清理组件代码</strong>，还可以使这些逻辑和行为可重用。</p><p>通过在自定义hooks中调用自定义hooks，可以将hooks组合在一起。</p><p>hooks只是函数，当然，函数可以调用其他函数。</p><p>Hooks 提供了一种新的方式来处理React中的问题，其中的思想是很有意思且新奇的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们大部分 React 类组件可以保存状态，而函数组件不能？ 并且类组件具有生命周期，而函数组件却不能？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;React 早期版本，类组件可以通过继承PureComponent来优化一些不必要的渲染，相对于函数组件，React 官网没有提</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>react.js组件传值</title>
    <link href="http://example.com/2020/12/26/react-js%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>http://example.com/2020/12/26/react-js%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</id>
    <published>2020-12-26T01:00:11.000Z</published>
    <updated>2020-12-27T12:30:03.947Z</updated>
    
    <content type="html"><![CDATA[<p>我是组件传值<br>hexo clean<br>hexo generate<br>hexo deploy推送</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我是组件传值&lt;br&gt;hexo clean&lt;br&gt;hexo generate&lt;br&gt;hexo deploy推送&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>promise总结</title>
    <link href="http://example.com/2020/12/25/promise%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/12/25/promise%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-25T12:36:26.000Z</published>
    <updated>2020-12-26T00:53:51.134Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的博客第一篇<br>hexo new 文章名称<br>npm install hexo-deployer-git –save<br>hexo clean<br>hexo generate<br>hexo deploy  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是我的博客第一篇&lt;br&gt;hexo new 文章名称&lt;br&gt;npm install hexo-deployer-git –save&lt;br&gt;hexo clean&lt;br&gt;hexo generate&lt;br&gt;hexo deploy  &lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/12/25/hello-world/"/>
    <id>http://example.com/2020/12/25/hello-world/</id>
    <published>2020-12-25T11:56:53.955Z</published>
    <updated>2020-12-25T11:56:53.955Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
